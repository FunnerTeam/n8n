# Dockerfile for Render deployment with fixed Node.js version
FROM node:20.15.0-alpine AS builder

# Install system dependencies
RUN apk add --update git openssh graphicsmagick tini tzdata ca-certificates libc6-compat jq
RUN apk --no-cache add --virtual fonts msttcorefonts-installer fontconfig && \
    update-ms-fonts && \
    fc-cache -f && \
    apk del fonts && \
    find /usr/share/fonts/truetype/msttcorefonts/ -type l -exec unlink {} \;

# Install npm tools
RUN npm install -g corepack@0.31 full-icu@1.5.0
RUN corepack enable

# Build the application from source
WORKDIR /src
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY packages/package.json packages/
COPY packages/*/package.json packages/*/
RUN pnpm install --frozen-lockfile

# Copy source and build
COPY . .
RUN pnpm build

# Create production deployment
RUN mkdir /compiled
RUN NODE_ENV=production pnpm --filter=n8n --prod --no-optional deploy /compiled

# Production image
FROM node:20.15.0-alpine

# Install runtime dependencies
RUN apk add --update tini ca-certificates libc6-compat graphicsmagick
RUN npm install -g full-icu@1.5.0

WORKDIR /home/node
COPY --from=builder /compiled /usr/local/lib/node_modules/n8n

# Setup n8n
RUN ln -s /usr/local/lib/node_modules/n8n/bin/n8n /usr/local/bin/n8n && \
    mkdir .n8n && \
    addgroup -g 1000 node && \
    adduser -u 1000 -G node -s /bin/sh -D node && \
    chown -R node:node .n8n

ENV NODE_ICU_DATA=/usr/local/lib/node_modules/full-icu
ENV SHELL=/bin/sh
USER node

EXPOSE 5678
ENTRYPOINT ["tini", "--"]
CMD ["n8n"] 